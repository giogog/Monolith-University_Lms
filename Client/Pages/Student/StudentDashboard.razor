@page "/student-dashboard"
@inject ITokenService TokenService
@inject NavigationManager NavigationManager
@inject IJwtService JwtService
@inject HttpClient Http

@code {
    private string role;
    private HubConnection hubConnection;

    private List<string> faculties = new List<string>();
    private StudentModel studentModel = new StudentModel();
    private List<SubjectByFacultyDto> subjects = new List<SubjectByFacultyDto>();
    private List<SelectedSubjectDto> selectedSubjects = new List<SelectedSubjectDto>();
    private EnrollmentSubjectDto selectedSubject;


    private bool showSubjectDetails = false;
    private bool _hasRendered = false;

    private int selectedSubjectId;
    private int selectedLectureId;
    private int selectedSeminarId = -1; 

    private string personalId;
    private string authToken;

    protected override async Task OnInitializedAsync()
    {
        // Initialization moved to OnAfterRenderAsync to ensure JavaScript interop is available
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            (authToken, personalId) = await TokenService.GetTokenAndUsernameAsync();
            await InitializeToken();
            await LoadFaculties();
            await LoadSelectedSubjects();
            await ConfigureSignalRAsync();
            _hasRendered = true;
            StateHasChanged(); // Request a re-render so that the component can reflect the updated state
        }
    }
    private async Task ConfigureSignalRAsync()
    {
        try
        {

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:5001/enrollmentHub"), options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(authToken);
                })
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Debug);
                    logging.AddConsole();
                })
                .Build();

            hubConnection.On<CapacityDto>("NewLectureCapacity", async (update) =>
            {
                var lecturesList = selectedSubject.Lectures.ToList();
                var lectureIndex = lecturesList.FindIndex(l => l.lectureId == update.classId);
                if (lectureIndex != -1)
                {
                    var updatedLecture = new EnrollmentLectureDto(lecturesList[lectureIndex].lectureId, 
                        lecturesList[lectureIndex].TeacherFullName, lecturesList[lectureIndex].ScheduleTimes, lecturesList[lectureIndex].Capacity, update.Capacity);

                    selectedSubject.Lectures[lectureIndex] = updatedLecture;

                    Console.WriteLine($"Updated capacity received for lecture {update.classId}: {update.Capacity}");
                    await InvokeAsync(StateHasChanged);
                }
            });


            hubConnection.On<CapacityDto>("NewSeminarCapacity", async (update) =>
            {
                var seminarList = selectedSubject.Seminars.ToList();
                var seminarIndex = selectedSubject.Seminars.ToList().FindIndex(l => l.seminarId == update.classId);
                if (seminarIndex != -1)
                {
                    var updatedSeminar = new EnrollmentSeminarDto(seminarList[seminarIndex].seminarId,
                        seminarList[seminarIndex].TeacherFullName, seminarList[seminarIndex].ScheduleTimes, seminarList[seminarIndex].Capacity, update.Capacity);
                    selectedSubject.Seminars[seminarIndex] = updatedSeminar;



                    Console.WriteLine($"Updated capacity received for lecture {update.classId}: {update.Capacity}");
                    await InvokeAsync(StateHasChanged);
                }
            });





            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started");
            await hubConnection.InvokeAsync("AddToStudentGroup");
            Console.WriteLine("Added to Student group");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
            Console.WriteLine($"Detailed error: {ex.StackTrace}");
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("RemoveFromStudentGroup");
            await hubConnection.DisposeAsync();
        }
    }
    private async Task InitializeToken()
    {
        if (!string.IsNullOrEmpty(authToken))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);
        }
        else
        {
            // Handle the case where authToken is null or empty
        }
    }

    private async Task LoadSelectedSubjects()
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:5001/api/student/selected-subjects/{personalId}");
            if (response.IsSuccessStatusCode)
            {
                selectedSubjects = await response.Content.ReadFromJsonAsync<List<SelectedSubjectDto>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                selectedSubjects.Clear();
            }
            else
            {
            }
        }
        catch (HttpRequestException e)
        {
        }
    }

    private async Task LoadFaculties()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:5001/api/university/faculty");
            if (response.IsSuccessStatusCode)
            {
                faculties = await response.Content.ReadFromJsonAsync<List<string>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                faculties.Clear();
            }
            else
            {
            }
        }
        catch (HttpRequestException e)
        {
        }

    }

    private async Task HandleValidSubmit()
    {
        await Search();
    }

    private async Task Search()
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:5001/api/student/subject-by-faculty/{studentModel.SelectedFaculty}");
            if (response.IsSuccessStatusCode)
            {
                subjects = await response.Content.ReadFromJsonAsync<List<SubjectByFacultyDto>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                subjects.Clear();
            }
            else
            {
            }
        }
        catch (HttpRequestException e)
        {
        }

    }

    private async Task ChooseSubject(int subjectId)
    {

        selectedSubject = await Http.GetFromJsonAsync<EnrollmentSubjectDto>($"https://localhost:5001/api/student/subject-by-id/{subjectId}");
        selectedSubjectId = subjectId;
        showSubjectDetails = true;
    }

    private void CloseSubjectDetails()
    {
        showSubjectDetails = false;
    }
    private async Task Save()
    {


        var enrollCommand = new EnrollToSubjectCommand(selectedSubjectId, selectedLectureId, selectedSeminarId, personalId);
        var response = await Http.PostAsJsonAsync("https://localhost:5001/api/student/enrollment-to-subject", enrollCommand);
        if (response.IsSuccessStatusCode)
        {
            CloseSubjectDetails();
            await LoadSelectedSubjects();
        }
        else
        {
            CloseSubjectDetails();
        }
    }
    private void OnLectureSelected(ChangeEventArgs e)
    {
        selectedLectureId = Convert.ToInt32(e.Value.ToString());
    }

    private void OnSeminarSelected(ChangeEventArgs e)
    {
        selectedSeminarId = Convert.ToInt32(e.Value.ToString());
    }
    
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm Model="studentModel" OnValidSubmit="HandleValidSubmit">
                <div class="form-group">
                    <label for="Faculty">Faculty:</label>
                    <InputSelect id="Faculty" class="form-control" @bind-Value="studentModel.SelectedFaculty">
                        <option value="">Select Faculty</option>
                        @foreach (var faculty in faculties)
                        {
                            <option value="@faculty">@faculty</option>
                        }
                    </InputSelect>
                </div>
                <button class="btn btn-primary" @onclick="Search">Search</button>
            </EditForm>
        </div>
    </div>
    <div class="row justify-content-center mt-4">
        <div class="col-md-6">
            @if (subjects.Any())
            {
                <div class="list-group">
                    @foreach (var subject in subjects)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @subject.Name
                            <button class="btn btn-success" @onclick="() => ChooseSubject(subject.subjectId)">
                                Choose
                            </button>
                        </li>
                    }
                </div>
            }
        </div>
    </div>
</div>


@if (showSubjectDetails)
{
    <div class="modal custom-modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedSubject.Name</h5>
                    <button type="button" class="close" @onclick="CloseSubjectDetails" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <h3>Lectures</h3>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Teacher</th>
                                <th>Day</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Capacity</th>
                                <th>Taken Places</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var lecture in selectedSubject.Lectures)
                            {
                                <tr>
                                    <td><input type="radio" name="lecturesGroup" value="@lecture.lectureId" @onchange="OnLectureSelected" /></td>
                                    <td>@lecture.TeacherFullName</td>
                                    <td>@lecture.ScheduleTimes.DayOfWeek</td>
                                    <td>@lecture.ScheduleTimes.StartTime</td>
                                    <td>@lecture.ScheduleTimes.EndTime</td>
                                    <td>@lecture.Capacity</td>
                                    <td>@lecture.TakenPlaces</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <h3>Seminars</h3>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Teacher</th>
                                <th>Day</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Capacity</th>
                                <th>Taken Places</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (selectedSubject.Seminars != null)
                            {
                                foreach (var seminar in selectedSubject.Seminars)
                                {
                                    <tr>
                                        <td><input type="radio" name="seminarsGroup" value="@seminar.seminarId" @onchange="OnSeminarSelected" /></td>
                                        <td>@seminar.TeacherFullName</td>
                                        <td>@seminar.ScheduleTimes.DayOfWeek</td>
                                        <td>@seminar.ScheduleTimes.StartTime</td>
                                        <td>@seminar.ScheduleTimes.EndTime</td>
                                        <td>@seminar.Capacity</td>
                                        <td>@seminar.TakenPlaces</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSubjectDetails">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
                </div>
            </div>
        </div>
    </div>

}
@if (selectedSubjects.Any())
{
    <h3>Selected Subjects</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Subject Name</th>
                <th>Teacher Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var subject in selectedSubjects)
            {
                <tr>
                    <td>@subject.SubjectName</td>
                    <td>@subject.TeacherFullName</td>
                </tr>
            }
        </tbody>
    </table>
}