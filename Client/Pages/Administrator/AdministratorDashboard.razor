@page "/admin-dashboard"
@using Microsoft.AspNetCore.SignalR.Client
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService
@inject NavigationManager NavigationManager

<h3>Applicants</h3>
@if (applicants != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Personal ID</th>
                <th>Faculty</th>
                <th>Grant</th>
                <th>Exam Results</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var applicant in applicants)
            {
                <tr>
                    <td>@applicant.Name</td>
                    <td>@applicant.Surname</td>
                    <td>@applicant.PersonalId</td>
                    <td>@applicant.Faculty</td>
                    <td>@applicant.examCard.Grant.ToString("0.00")</td>
                    <td>
                        @foreach (var result in applicant.examCard.Results)
                        {
                            <div>@result.Subject - @result.Grade</div>
                        }
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="() => ApproveApplication(applicant.PersonalId)">Approve</button>
                        <button class="btn btn-danger" @onclick="() => DeclineApplication(applicant.PersonalId)">Decline</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading applicants...</p>
}

@code {
    private HubConnection hubConnection;
    private List<ApplicantDto> applicants = new();

    protected override async Task OnInitializedAsync()
    {
        await InitializeApplicantsAsync();
        await ConfigureSignalRAsync();
    }

    private async Task InitializeApplicantsAsync()
    {
        try
        {
            var tokenResult = await TokenService.GetTokenAndUsernameAsync();
            var token = tokenResult.Token;
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.GetAsync("https://localhost:5001/api/Applicant/applicants");
            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"HTTP request failed with status code: {response.StatusCode}");
            }

            var applicantsData = await response.Content.ReadFromJsonAsync<IEnumerable<ApplicantDto>>();
            applicants = applicantsData.ToList();
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP request exception: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task ConfigureSignalRAsync()
    {
        try
        {
            var tokenResult = await TokenService.GetTokenAndUsernameAsync();
            var token = tokenResult.Token;

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:5001/applicantHub"), options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Debug);
                    logging.AddConsole();
                })
                .Build();

            // Correctly handle the "NewUser" event
            hubConnection.On<ApplicantDto>("NewUser", async (newUser) =>
            {
                applicants.Add(newUser);
                Console.WriteLine($"New user received: {newUser.Name}");
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started");
            await hubConnection.InvokeAsync("AddToAdminGroup");
            Console.WriteLine("Added to Admin group");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
            Console.WriteLine($"Detailed error: {ex.StackTrace}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("RemoveFromAdminGroup");
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ApproveApplication(string personalId)
    {
        try
        {
            var tokenResult = await TokenService.GetTokenAndUsernameAsync();
            var token = tokenResult.Token;

            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.PostAsync($"https://localhost:5001/api/Applicant/approve-application/{personalId}", null);
            response.EnsureSuccessStatusCode();

            applicants.RemoveAll(a => a.PersonalId == personalId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error approving application: {ex.Message}");
        }
    }

    private async Task DeclineApplication(string personalId)
    {
        try
        {
            var tokenResult = await TokenService.GetTokenAndUsernameAsync();
            var token = tokenResult.Token;

            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.DeleteAsync($"https://localhost:5001/api/Applicant/decline-application/{personalId}");
            response.EnsureSuccessStatusCode();

            applicants.RemoveAll(a => a.PersonalId == personalId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error declining application: {ex.Message}");
        }
    }

    public record ExamResultsDto(string Subject, int Grade);
    public record ExamsCardDto(double Grant, IEnumerable<ExamResultsDto> Results);
    public record ApplicantDto(string Name, string Surname, string PersonalId, string Faculty, ExamsCardDto examCard);
}