@page "/application"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ValidationService ValidationService
<h3>Application</h3>

<EditForm Model="registerDto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="PersonalID">Personal ID:</label>
        <InputText id="PersonalID" class="form-control" @bind-Value="registerDto.PersonalID" />
        <div class="text-danger">
            @if (fieldErrors.ContainsKey(nameof(registerDto.PersonalID)))
            {
                @foreach (var error in fieldErrors[nameof(registerDto.PersonalID)])
                {
                    <div>@error</div>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="registerDto.Name" />
        <div class="text-danger">
            @if (fieldErrors.ContainsKey(nameof(registerDto.Name)))
            {
                @foreach (var error in fieldErrors[nameof(registerDto.Name)])
                {
                    <div>@error</div>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label for="Surname">Surname:</label>
        <InputText id="Surname" class="form-control" @bind-Value="registerDto.Surname" />
        <div class="text-danger">
            @if (fieldErrors.ContainsKey(nameof(registerDto.Surname)))
            {
                @foreach (var error in fieldErrors[nameof(registerDto.Surname)])
                {
                    <div>@error</div>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText id="Email" class="form-control" @bind-Value="registerDto.Email" />
        <div class="text-danger">
            @if (fieldErrors.ContainsKey(nameof(registerDto.Email)))
            {
                @foreach (var error in fieldErrors[nameof(registerDto.Email)])
                {
                    <div>@error</div>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label for="Password">Password:</label>
        <InputText id="Password" class="form-control" @bind-Value="registerDto.Password" type="password" />
        <div class="text-danger">
            @if (fieldErrors.ContainsKey(nameof(registerDto.Password)))
            {
                @foreach (var error in fieldErrors[nameof(registerDto.Password)])
                {
                    <div>@error</div>
                }
            }
        </div>
    </div>

    <div class="form-group">
        <label for="Faculty">Faculty:</label>
        <InputSelect id="Faculty" class="form-control" @bind-Value="registerDto.Faculty">
            <option value="">Select Faculty</option>
            @foreach (var faculty in faculties)
            {
                <option value="@faculty">@faculty</option>
            }
        </InputSelect>
        <div class="text-danger">
            @if (fieldErrors.ContainsKey(nameof(registerDto.Faculty)))
            {
                @foreach (var error in fieldErrors[nameof(registerDto.Faculty)])
                {
                    <div>@error</div>
                }
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-danger" role="alert">
            @message
        </div>
    }
</EditForm>

@code {
    private RegisterDto registerDto = new RegisterDto();
    private List<string> faculties = new List<string>();
    private string message = "";
    private Dictionary<string, List<string>> fieldErrors = new Dictionary<string, List<string>>();

    protected override async Task OnInitializedAsync()
    {
        faculties = await Http.GetFromJsonAsync<List<string>>("https://localhost:5001/api/University/faculty");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:5001/api/Account/student-application", registerDto);
            if (response.IsSuccessStatusCode)
            {
                var personalId = registerDto.PersonalID;
                Navigation.NavigateTo($"/confirmation?personalId={personalId}");
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                fieldErrors = ValidationService.ParseErrors(responseContent);
                message = string.Empty;
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }


}



