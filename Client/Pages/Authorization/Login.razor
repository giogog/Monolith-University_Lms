@page "/login"
@using System.Net
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ITokenService TokenService
@inject IJwtService JwtService
@inject ValidationService ValidationService

<h3>Login</h3>

<div class="mb-3">
    <label for="personalId" class="form-label">PersonalId (Username):</label>
    <input id="personalId" type="text" class="form-control" @bind="PersonalId" />
    @if (validationMessages.ContainsKey(nameof(PersonalId)))
    {
        <div class="invalid-feedback">@string.Join(", ", validationMessages[nameof(PersonalId)])</div>
    }
</div>
<div class="mb-3">
    <label for="password" class="form-label">Password:</label>
    <input id="password" type="password" class="form-control" @bind="Password" />
    @if (validationMessages.ContainsKey(nameof(Password)))
    {
        <div class="invalid-feedback">@string.Join(", ", validationMessages[nameof(Password)])</div>
    }
</div>
<button class="btn btn-primary" @onclick="HandleLogin">Login</button>


@if (validationMessages.ContainsKey("Login"))
{
    <div class="text-danger">@string.Join(", ", validationMessages["Login"])</div>
}

@code {
    private string PersonalId;
    private string Password;
    private Dictionary<string, List<string>> validationMessages = new();

    private async Task HandleLogin()
    {
        validationMessages.Clear();

        var loginModel = new { PersonalId, Password };
        var response = await Http.PostAsJsonAsync("https://localhost:5001/api/Account/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();

            var token = result.Token;
            var username = JwtService.GetUsernameFromToken(token); // Get username from token
            await TokenService.SaveTokenAsync(token, username);
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Get role from token using JwtService
            var role = JwtService.GetRoleFromToken(token);

            // Navigate based on the role
            switch (role)
            {
                case "Admin":
                    Navigation.NavigateTo("/admin-dashboard");
                    break;
                case "Student":
                    Navigation.NavigateTo("/student-dashboard");
                    break;
                case "Teacher":
                    Navigation.NavigateTo("/teacher-dashboard");
                    break;
                case "Applicant":
                    Navigation.NavigateTo("/applicant");
                    break;
                default:
                    Navigation.NavigateTo("/");
                    break;
            }
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            validationMessages = ValidationService.ParseErrors(responseContent);
            var errorMessage = "Login failed. Please check your credentials and try again.";
            if (response.StatusCode == HttpStatusCode.NotFound)
            {
                errorMessage = "User does not exist.";
            }
            else if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                errorMessage = "Incorrect username or password.";
            }

            validationMessages["Login"] = new List<string> { errorMessage };
        }
        }
    }



